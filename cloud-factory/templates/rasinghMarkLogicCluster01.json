{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge"
            ],
            "Default": "t2.small",
            "Description": "Set type of EC2 instance to launch.",
            "Type": "String"
        },
        "MaxSize": {
            "AllowedValues": [
                "0",
                "1"
            ],
            "Default": "1",
            "Description": "Set MinSize and MaxSize to 0 to stop instances. Set it to 1 to start instances.",
            "Type": "Number"
        },
        "MinSize": {
            "AllowedValues": [
                "0",
                "1"
            ],
            "Default": "1",
            "Description": "Set MinSize and MaxSize to 0 to stop instances. Set it to 1 to start instances",
            "Type": "Number"
        }
    },
    "Resources": {
        "rasinghMarkLogicCluster01ASGb1": {
            "Properties": {
                "AvailabilityZones": [
                    "us-east-1b"
                ],
                "LaunchConfigurationName": {
                    "Ref": "rasinghMarkLogicCluster01LCb1"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "rasinghMarkLogicCluster01ELB"
                    }
                ],
                "MaxSize": {
                    "Ref": "MinSize"
                },
                "MinSize": {
                    "Ref": "MaxSize"
                },
                "Tags": [
                    {
                        "Key": "name",
                        "PropagateAtLaunch": true,
                        "Value": "rasinghMarkLogicCluster01-ASG-zone-b-instance-1"
                    }
                ],
                "VPCZoneIdentifier": [
                    "subnet-c4e4deef"
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "rasinghMarkLogicCluster01ASGb2": {
            "Properties": {
                "AvailabilityZones": [
                    "us-east-1b"
                ],
                "LaunchConfigurationName": {
                    "Ref": "rasinghMarkLogicCluster01LCb2"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "rasinghMarkLogicCluster01ELB"
                    }
                ],
                "MaxSize": {
                    "Ref": "MinSize"
                },
                "MinSize": {
                    "Ref": "MaxSize"
                },
                "Tags": [
                    {
                        "Key": "name",
                        "PropagateAtLaunch": true,
                        "Value": "rasinghMarkLogicCluster01-ASG-zone-b-instance-2"
                    }
                ],
                "VPCZoneIdentifier": [
                    "subnet-c4e4deef"
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "rasinghMarkLogicCluster01ASGc1": {
            "Properties": {
                "AvailabilityZones": [
                    "us-east-1c"
                ],
                "LaunchConfigurationName": {
                    "Ref": "rasinghMarkLogicCluster01LCc1"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "rasinghMarkLogicCluster01ELB"
                    }
                ],
                "MaxSize": {
                    "Ref": "MinSize"
                },
                "MinSize": {
                    "Ref": "MaxSize"
                },
                "Tags": [
                    {
                        "Key": "name",
                        "PropagateAtLaunch": true,
                        "Value": "rasinghMarkLogicCluster01-ASG-zone-c-instance-1"
                    }
                ],
                "VPCZoneIdentifier": [
                    "subnet-1558a563"
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "rasinghMarkLogicCluster01ASGc2": {
            "Properties": {
                "AvailabilityZones": [
                    "us-east-1c"
                ],
                "LaunchConfigurationName": {
                    "Ref": "rasinghMarkLogicCluster01LCc2"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "rasinghMarkLogicCluster01ELB"
                    }
                ],
                "MaxSize": {
                    "Ref": "MinSize"
                },
                "MinSize": {
                    "Ref": "MaxSize"
                },
                "Tags": [
                    {
                        "Key": "name",
                        "PropagateAtLaunch": true,
                        "Value": "rasinghMarkLogicCluster01-ASG-zone-c-instance-2"
                    }
                ],
                "VPCZoneIdentifier": [
                    "subnet-1558a563"
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "rasinghMarkLogicCluster01ASGe1": {
            "Properties": {
                "AvailabilityZones": [
                    "us-east-1e"
                ],
                "LaunchConfigurationName": {
                    "Ref": "rasinghMarkLogicCluster01LCe1"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "rasinghMarkLogicCluster01ELB"
                    }
                ],
                "MaxSize": {
                    "Ref": "MinSize"
                },
                "MinSize": {
                    "Ref": "MaxSize"
                },
                "Tags": [
                    {
                        "Key": "name",
                        "PropagateAtLaunch": true,
                        "Value": "rasinghMarkLogicCluster01-ASG-zone-e-instance-1"
                    }
                ],
                "VPCZoneIdentifier": [
                    "subnet-e04ef1dd"
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "rasinghMarkLogicCluster01ASGe2": {
            "Properties": {
                "AvailabilityZones": [
                    "us-east-1e"
                ],
                "LaunchConfigurationName": {
                    "Ref": "rasinghMarkLogicCluster01LCe2"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "rasinghMarkLogicCluster01ELB"
                    }
                ],
                "MaxSize": {
                    "Ref": "MinSize"
                },
                "MinSize": {
                    "Ref": "MaxSize"
                },
                "Tags": [
                    {
                        "Key": "name",
                        "PropagateAtLaunch": true,
                        "Value": "rasinghMarkLogicCluster01-ASG-zone-e-instance-2"
                    }
                ],
                "VPCZoneIdentifier": [
                    "subnet-e04ef1dd"
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "rasinghMarkLogicCluster01ConfigVolumeb1": {
            "Properties": {
                "AvailabilityZone": "us-east-1b",
                "Encrypted": "false",
                "Size": "128",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-ConfigVolume-zone-b-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "b"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "ConfigVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdb"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/MarkLogic"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01ConfigVolumeb2": {
            "Properties": {
                "AvailabilityZone": "us-east-1b",
                "Encrypted": "false",
                "Size": "128",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-ConfigVolume-zone-b-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "b"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "ConfigVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdb"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/MarkLogic"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01ConfigVolumec1": {
            "Properties": {
                "AvailabilityZone": "us-east-1c",
                "Encrypted": "false",
                "Size": "128",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-ConfigVolume-zone-c-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "c"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "ConfigVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdb"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/MarkLogic"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01ConfigVolumec2": {
            "Properties": {
                "AvailabilityZone": "us-east-1c",
                "Encrypted": "false",
                "Size": "128",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-ConfigVolume-zone-c-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "c"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "ConfigVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdb"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/MarkLogic"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01ConfigVolumee1": {
            "Properties": {
                "AvailabilityZone": "us-east-1e",
                "Encrypted": "false",
                "Size": "128",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-ConfigVolume-zone-e-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "e"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "ConfigVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdb"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/MarkLogic"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01ConfigVolumee2": {
            "Properties": {
                "AvailabilityZone": "us-east-1e",
                "Encrypted": "false",
                "Size": "128",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-ConfigVolume-zone-e-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "e"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "ConfigVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdb"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/MarkLogic"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01DataVolumeb1": {
            "Properties": {
                "AvailabilityZone": "us-east-1b",
                "Encrypted": "false",
                "Size": "512",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-DataVolume-zone-b-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "b"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "DataVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdc"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/data"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01DataVolumeb2": {
            "Properties": {
                "AvailabilityZone": "us-east-1b",
                "Encrypted": "false",
                "Size": "512",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-DataVolume-zone-b-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "b"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "DataVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdc"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/data"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01DataVolumec1": {
            "Properties": {
                "AvailabilityZone": "us-east-1c",
                "Encrypted": "false",
                "Size": "512",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-DataVolume-zone-c-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "c"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "DataVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdc"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/data"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01DataVolumec2": {
            "Properties": {
                "AvailabilityZone": "us-east-1c",
                "Encrypted": "false",
                "Size": "512",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-DataVolume-zone-c-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "c"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "DataVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdc"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/data"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01DataVolumee1": {
            "Properties": {
                "AvailabilityZone": "us-east-1e",
                "Encrypted": "false",
                "Size": "512",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-DataVolume-zone-e-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "e"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "DataVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdc"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/data"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01DataVolumee2": {
            "Properties": {
                "AvailabilityZone": "us-east-1e",
                "Encrypted": "false",
                "Size": "512",
                "SnapshotId": "snap-41163b47",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-DataVolume-zone-e-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "e"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "DataVolume"
                    },
                    {
                        "Key": "volume",
                        "Value": 1
                    },
                    {
                        "Key": "Device",
                        "Value": "/dev/sdc"
                    },
                    {
                        "Key": "MountDirectory",
                        "Value": "/var/opt/data"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "rasinghMarkLogicCluster01ELB": {
            "Properties": {
                "AccessLoggingPolicy": {
                    "EmitInterval": "5",
                    "Enabled": true,
                    "S3BucketName": "sandbox-dev-bucket",
                    "S3BucketPrefix": "rasingh/load-balancer/475882391631/ml-master"
                },
                "AppCookieStickinessPolicy": [
                    {
                        "CookieName": "SessionID",
                        "PolicyName": "MLSession"
                    }
                ],
                "ConnectionDrainingPolicy": {
                    "Enabled": true,
                    "Timeout": "60"
                },
                "CrossZone": "true",
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "10",
                    "Target": "HTTP:7997/",
                    "Timeout": "5",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": "9000",
                        "LoadBalancerPort": "9000",
                        "PolicyNames": [
                            "MLSession"
                        ],
                        "Protocol": "HTTP"
                    },
                    {
                        "InstancePort": "9001",
                        "LoadBalancerPort": "9001",
                        "PolicyNames": [
                            "MLSession"
                        ],
                        "Protocol": "HTTP"
                    }
                ],
                "Scheme": "internal",
                "SecurityGroups": [
                    {
                        "Ref": "rasinghMarkLogicCluster01LBSG"
                    }
                ],
                "Subnets": [
                    "subnet-c4e4deef",
                    "subnet-1558a563",
                    "subnet-e04ef1dd"
                ],
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-LoadBalancer-zone-allzones-instance-None"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "allzones"
                    },
                    {
                        "Key": "instance",
                        "Value": "None"
                    },
                    {
                        "Key": "type",
                        "Value": "LoadBalancer"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "rasinghMarkLogicCluster01ENIb1": {
            "Properties": {
                "Description": "For MarkLogic zone b instance 1",
                "GroupSet": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "SubnetId": "subnet-c4e4deef",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-NetworkInterface-zone-b-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "b"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "NetworkInterface"
                    }
                ]
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "rasinghMarkLogicCluster01ENIb2": {
            "Properties": {
                "Description": "For MarkLogic zone b instance 2",
                "GroupSet": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "SubnetId": "subnet-c4e4deef",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-NetworkInterface-zone-b-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "b"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "NetworkInterface"
                    }
                ]
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "rasinghMarkLogicCluster01ENIc1": {
            "Properties": {
                "Description": "For MarkLogic zone c instance 1",
                "GroupSet": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "SubnetId": "subnet-1558a563",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-NetworkInterface-zone-c-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "c"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "NetworkInterface"
                    }
                ]
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "rasinghMarkLogicCluster01ENIc2": {
            "Properties": {
                "Description": "For MarkLogic zone c instance 2",
                "GroupSet": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "SubnetId": "subnet-1558a563",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-NetworkInterface-zone-c-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "c"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "NetworkInterface"
                    }
                ]
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "rasinghMarkLogicCluster01ENIe1": {
            "Properties": {
                "Description": "For MarkLogic zone e instance 1",
                "GroupSet": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "SubnetId": "subnet-e04ef1dd",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-NetworkInterface-zone-e-instance-1"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "e"
                    },
                    {
                        "Key": "instance",
                        "Value": "1"
                    },
                    {
                        "Key": "type",
                        "Value": "NetworkInterface"
                    }
                ]
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "rasinghMarkLogicCluster01ENIe2": {
            "Properties": {
                "Description": "For MarkLogic zone e instance 2",
                "GroupSet": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "SubnetId": "subnet-e04ef1dd",
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "rasinghMarkLogicCluster01-NetworkInterface-zone-e-instance-2"
                    },
                    {
                        "Key": "env",
                        "Value": "rasingh"
                    },
                    {
                        "Key": "componentType",
                        "Value": "MarkLogic"
                    },
                    {
                        "Key": "component",
                        "Value": "Cluster01"
                    },
                    {
                        "Key": "zone",
                        "Value": "e"
                    },
                    {
                        "Key": "instance",
                        "Value": "2"
                    },
                    {
                        "Key": "type",
                        "Value": "NetworkInterface"
                    }
                ]
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "rasinghMarkLogicCluster01InternalSG": {
            "Properties": {
                "GroupDescription": "Enable communication of cluster ports e.g. For nodes within cluster and replication between clusters.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.221.0.0/16",
                        "FromPort": 7997,
                        "IpProtocol": "tcp",
                        "ToPort": 8002
                    },
                    {
                        "CidrIp": "10.221.0.0/16",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "FromPort": 9000,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Fn::GetAtt": [
                                "rasinghMarkLogicCluster01LBSG",
                                "GroupId"
                            ]
                        },
                        "ToPort": 9001
                    }
                ],
                "VpcId": "vpc-6a80380e"
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "rasinghMarkLogicCluster01LBSG": {
            "Properties": {
                "GroupDescription": "Enable HTTP/XDBC access on the inbound port",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.221.0.0/16",
                        "FromPort": 9000,
                        "IpProtocol": "tcp",
                        "ToPort": 9001
                    }
                ],
                "VpcId": "vpc-6a80380e"
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "rasinghMarkLogicCluster01LCb1": {
            "Properties": {
                "EbsOptimized": "false",
                "IamInstanceProfile": "rasingh-MarkLogic-role",
                "ImageId": "ami-5bfcb131",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": "rasingh-MarkLogic",
                "SecurityGroups": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo '{\"componentType\": \"MarkLogic\", \"instanceNumber\": 1, \"DataVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdc\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/data\", \"Size\": \"512\"}], \"zone\": \"b\", \"env\": \"rasingh\", \"ConfigVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdb\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/MarkLogic\", \"Size\": \"128\"}], \"region\": \"us-east-1\", \"component\": \"Cluster01\", \"stack-name\": \"rasinghMarkLogicCluster01\"}' > /etc/instance.conf\n",
                                "echo \"INFO generated /etc/instance.conf\"\n",
                                "mkdir -p /opt/custom-marklogic\n",
                                "cat > /opt/custom-marklogic/attach_volumes.py <<EOF\n# /usr/bin/env python\n\n\"\"\"Attach ENI and Volumes to the instance. Mounts volumes.\n\"\"\"\n\nimport boto\nimport json\nimport urllib2\nimport commands\nimport os\nimport time\nfrom boto.exception import EC2ResponseError\n\nRETRY_COUNT = 15\nRETRY_WAIT_MULTIPLIER = 1\n\n\ndef log(message):\n    print \"%s %s\" % (time.strftime(\"[%d/%b/%Y:%H:%M:%S %z]\"), message)\n\n\ndef print_command_output_status(command, status, output):\n    log(\"INFO executed command : %s status : %s output : %s\" % (command, status, output))\n\n\ndef run_command(command):\n    status, output = commands.getstatusoutput(command)\n    print_command_output_status(command, status, output)\n    return (status, output)\n\n\ndef attach_volume(volume, instance_id, device):\n    count = 0\n    alternate_device = get_alternative_name_for_device(device)\n    while (count < RETRY_COUNT and not os.path.exists(device) and not os.path.exists(alternate_device)):\n        log(\"INFO Volume status : %s\" % (volume.status))\n        if volume.status == \"available\":\n            try:\n                volume_attach_result = conn.attach_volume(volume.id, instance_id, device)\n                time.sleep(2)\n                log(\"INFO Volume attach result : \" + str(volume_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for device : %s to appear\" % (device))\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef get_alternative_name_for_device(device):\n    return \"/dev/xvd\" + device[-1:]\n\n\ndef attach_network_interface(network_interface, instance_id, device_index):\n    count = 0\n    while (count < RETRY_COUNT and int(run_command(\"ifconfig | grep 'eth' |wc -l\")[1]) < 2):\n        if network_interface.status == \"available\":\n            try:\n                network_interface_attach_result = conn.attach_network_interface(network_interface.id, instance_id,\n                                                                                device_index)\n                time.sleep(2)\n                log(\"INFO Network Interface attach result : \" + str(network_interface_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for network interface to appear\")\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef mount_volume(device, mount_point):\n    if os.path.exists(device):\n        device = device\n    elif os.path.exists(get_alternative_name_for_device(device)):\n        device = get_alternative_name_for_device(device)\n    else:\n        raise Exception(\"ERROR device : %s does not exist\" % (device))\n\n    if not os.path.isdir(mount_point):\n        run_command(\"sudo mkdir -p \" + mount_point)\n        run_command(\"sudo chown daemon:daemon \" + mount_point)\n    run_command(\"sudo mount \" + device + \" \" + mount_point)\n\n\ndef start_marklogic():\n    run_command(\"sudo service MarkLogic start\")\n\n\ndef stop_marklogic():\n    run_command(\"sudo service MarkLogic stop\")\n\n\ndef validate_volume_length(found_volumes, instance_config):\n    if len(config_volumes) != len(instance_config):\n        message = \"ERROR config mismatch len(config_volumes) : %d len(instance_config['ConfigVolume']) : %d\" % (\n            len(config_volumes), len(instance_config))\n        log(message)\n        raise Exception(message)\n\n\nif __name__ == \"__main__\":\n    conn = boto.connect_ec2()\n    with open(\"/etc/instance.conf\") as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    stop_marklogic()\n\n    instance_id = urllib2.urlopen(\"http://169.254.169.254/latest/meta-data/instance-id\").read()\n    log(\"INFO Found instance id : \" + str(instance_id))\n\n    config_volumes = conn.get_all_volumes(None,\n                                          filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                   \"tag:zone\": instance_config[\"zone\"],\n                                                   \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                   \"tag:type\": \"ConfigVolume\"})\n\n    log(\"INFO Found config volumes : %d \" % (len(config_volumes)))\n    validate_volume_length(config_volumes, instance_config[\"ConfigVolumes\"])\n\n    data_volumes = conn.get_all_volumes(None,\n                                        filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                 \"tag:zone\": instance_config[\"zone\"],\n                                                 \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                 \"tag:type\": \"DataVolume\"})\n    log(\"INFO Found data volume : %d \" % (len(data_volumes)))\n    validate_volume_length(data_volumes, instance_config[\"DataVolumes\"])\n\n    network_interface = conn.get_all_network_interfaces(None, filters={\n        \"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"], \"tag:zone\": instance_config[\"zone\"],\n        \"tag:instance\": str(instance_config[\"instanceNumber\"])})[0]\n\n    log(\"INFO Found network interface : \" + str(network_interface))\n\n    attach_network_interface(network_interface, instance_id, 1)\n\n    for config_volume in config_volumes:\n        attach_volume(config_volume, instance_id, config_volume.tags[\"Device\"])\n        mount_volume(config_volume.tags[\"Device\"], config_volume.tags[\"MountDirectory\"])\n\n    for data_volume in data_volumes:\n        attach_volume(data_volume, instance_id, data_volume.tags[\"Device\"])\n        mount_volume(data_volume.tags[\"Device\"], data_volume.tags[\"MountDirectory\"])\n\n    start_marklogic()\n\nEOF\n",
                                "cat > /opt/custom-marklogic/format_volumes.py <<EOF\n\"\"\"\nDangerous module. Use it to understand how to format volumes.\nThis just exist to capture procedure of formating the EBS.\n\"\"\"\n\nimport commands\nimport boto\nimport json\n\ndef format_volume(device):\n    file_system_status_command = \"sudo file -s \" + device\n    status, output = commands.getstatusoutput(file_system_status_command)\n    if status == 0:\n        path = \"/\"+\"/\".join([device.split(\"/\")[1],output.split()[-1]])\n        status, output = commands.getstatusoutput(\"sudo file -s \"+path)\n        if status == 0 and output == path+\": data\":\n            status, output = commands.getstatusoutput(\"sudo mkfs -t ext4 \"+path)\n            print output\n            return path\n        else:\n            print \"Volume %s is already formatted status : %s output : %s \" % (device, status, output)\n    else:\n        print \"Exiting: non zero status of command '%s' status : %s  output : %s\" % (file_system_status_command, status, output)\n\nif __name__ == '__main__':\n    conn = boto.connect_ec2()\n    with open('/etc/instance.conf') as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    config_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"ConfigVolume\"})[0]\n    print \"Found config volume : \"+str(config_volume)\n\n    data_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"DataVolume\"})[0]\n    print \"Found data volume : \"+str(data_volume)\n\n    format_volume(config_volume.attach_data.device)\n    format_volume(data_volume.attach_data.device)\n\n\nEOF\n",
                                "python /opt/custom-marklogic/attach_volumes.py"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "rasinghMarkLogicCluster01LCb2": {
            "Properties": {
                "EbsOptimized": "false",
                "IamInstanceProfile": "rasingh-MarkLogic-role",
                "ImageId": "ami-5bfcb131",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": "rasingh-MarkLogic",
                "SecurityGroups": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo '{\"componentType\": \"MarkLogic\", \"instanceNumber\": 2, \"DataVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdc\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/data\", \"Size\": \"512\"}], \"zone\": \"b\", \"env\": \"rasingh\", \"ConfigVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdb\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/MarkLogic\", \"Size\": \"128\"}], \"region\": \"us-east-1\", \"component\": \"Cluster01\", \"stack-name\": \"rasinghMarkLogicCluster01\"}' > /etc/instance.conf\n",
                                "echo \"INFO generated /etc/instance.conf\"\n",
                                "mkdir -p /opt/custom-marklogic\n",
                                "cat > /opt/custom-marklogic/attach_volumes.py <<EOF\n# /usr/bin/env python\n\n\"\"\"Attach ENI and Volumes to the instance. Mounts volumes.\n\"\"\"\n\nimport boto\nimport json\nimport urllib2\nimport commands\nimport os\nimport time\nfrom boto.exception import EC2ResponseError\n\nRETRY_COUNT = 15\nRETRY_WAIT_MULTIPLIER = 1\n\n\ndef log(message):\n    print \"%s %s\" % (time.strftime(\"[%d/%b/%Y:%H:%M:%S %z]\"), message)\n\n\ndef print_command_output_status(command, status, output):\n    log(\"INFO executed command : %s status : %s output : %s\" % (command, status, output))\n\n\ndef run_command(command):\n    status, output = commands.getstatusoutput(command)\n    print_command_output_status(command, status, output)\n    return (status, output)\n\n\ndef attach_volume(volume, instance_id, device):\n    count = 0\n    alternate_device = get_alternative_name_for_device(device)\n    while (count < RETRY_COUNT and not os.path.exists(device) and not os.path.exists(alternate_device)):\n        log(\"INFO Volume status : %s\" % (volume.status))\n        if volume.status == \"available\":\n            try:\n                volume_attach_result = conn.attach_volume(volume.id, instance_id, device)\n                time.sleep(2)\n                log(\"INFO Volume attach result : \" + str(volume_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for device : %s to appear\" % (device))\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef get_alternative_name_for_device(device):\n    return \"/dev/xvd\" + device[-1:]\n\n\ndef attach_network_interface(network_interface, instance_id, device_index):\n    count = 0\n    while (count < RETRY_COUNT and int(run_command(\"ifconfig | grep 'eth' |wc -l\")[1]) < 2):\n        if network_interface.status == \"available\":\n            try:\n                network_interface_attach_result = conn.attach_network_interface(network_interface.id, instance_id,\n                                                                                device_index)\n                time.sleep(2)\n                log(\"INFO Network Interface attach result : \" + str(network_interface_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for network interface to appear\")\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef mount_volume(device, mount_point):\n    if os.path.exists(device):\n        device = device\n    elif os.path.exists(get_alternative_name_for_device(device)):\n        device = get_alternative_name_for_device(device)\n    else:\n        raise Exception(\"ERROR device : %s does not exist\" % (device))\n\n    if not os.path.isdir(mount_point):\n        run_command(\"sudo mkdir -p \" + mount_point)\n        run_command(\"sudo chown daemon:daemon \" + mount_point)\n    run_command(\"sudo mount \" + device + \" \" + mount_point)\n\n\ndef start_marklogic():\n    run_command(\"sudo service MarkLogic start\")\n\n\ndef stop_marklogic():\n    run_command(\"sudo service MarkLogic stop\")\n\n\ndef validate_volume_length(found_volumes, instance_config):\n    if len(config_volumes) != len(instance_config):\n        message = \"ERROR config mismatch len(config_volumes) : %d len(instance_config['ConfigVolume']) : %d\" % (\n            len(config_volumes), len(instance_config))\n        log(message)\n        raise Exception(message)\n\n\nif __name__ == \"__main__\":\n    conn = boto.connect_ec2()\n    with open(\"/etc/instance.conf\") as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    stop_marklogic()\n\n    instance_id = urllib2.urlopen(\"http://169.254.169.254/latest/meta-data/instance-id\").read()\n    log(\"INFO Found instance id : \" + str(instance_id))\n\n    config_volumes = conn.get_all_volumes(None,\n                                          filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                   \"tag:zone\": instance_config[\"zone\"],\n                                                   \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                   \"tag:type\": \"ConfigVolume\"})\n\n    log(\"INFO Found config volumes : %d \" % (len(config_volumes)))\n    validate_volume_length(config_volumes, instance_config[\"ConfigVolumes\"])\n\n    data_volumes = conn.get_all_volumes(None,\n                                        filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                 \"tag:zone\": instance_config[\"zone\"],\n                                                 \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                 \"tag:type\": \"DataVolume\"})\n    log(\"INFO Found data volume : %d \" % (len(data_volumes)))\n    validate_volume_length(data_volumes, instance_config[\"DataVolumes\"])\n\n    network_interface = conn.get_all_network_interfaces(None, filters={\n        \"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"], \"tag:zone\": instance_config[\"zone\"],\n        \"tag:instance\": str(instance_config[\"instanceNumber\"])})[0]\n\n    log(\"INFO Found network interface : \" + str(network_interface))\n\n    attach_network_interface(network_interface, instance_id, 1)\n\n    for config_volume in config_volumes:\n        attach_volume(config_volume, instance_id, config_volume.tags[\"Device\"])\n        mount_volume(config_volume.tags[\"Device\"], config_volume.tags[\"MountDirectory\"])\n\n    for data_volume in data_volumes:\n        attach_volume(data_volume, instance_id, data_volume.tags[\"Device\"])\n        mount_volume(data_volume.tags[\"Device\"], data_volume.tags[\"MountDirectory\"])\n\n    start_marklogic()\n\nEOF\n",
                                "cat > /opt/custom-marklogic/format_volumes.py <<EOF\n\"\"\"\nDangerous module. Use it to understand how to format volumes.\nThis just exist to capture procedure of formating the EBS.\n\"\"\"\n\nimport commands\nimport boto\nimport json\n\ndef format_volume(device):\n    file_system_status_command = \"sudo file -s \" + device\n    status, output = commands.getstatusoutput(file_system_status_command)\n    if status == 0:\n        path = \"/\"+\"/\".join([device.split(\"/\")[1],output.split()[-1]])\n        status, output = commands.getstatusoutput(\"sudo file -s \"+path)\n        if status == 0 and output == path+\": data\":\n            status, output = commands.getstatusoutput(\"sudo mkfs -t ext4 \"+path)\n            print output\n            return path\n        else:\n            print \"Volume %s is already formatted status : %s output : %s \" % (device, status, output)\n    else:\n        print \"Exiting: non zero status of command '%s' status : %s  output : %s\" % (file_system_status_command, status, output)\n\nif __name__ == '__main__':\n    conn = boto.connect_ec2()\n    with open('/etc/instance.conf') as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    config_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"ConfigVolume\"})[0]\n    print \"Found config volume : \"+str(config_volume)\n\n    data_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"DataVolume\"})[0]\n    print \"Found data volume : \"+str(data_volume)\n\n    format_volume(config_volume.attach_data.device)\n    format_volume(data_volume.attach_data.device)\n\n\nEOF\n",
                                "python /opt/custom-marklogic/attach_volumes.py"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "rasinghMarkLogicCluster01LCc1": {
            "Properties": {
                "EbsOptimized": "false",
                "IamInstanceProfile": "rasingh-MarkLogic-role",
                "ImageId": "ami-5bfcb131",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": "rasingh-MarkLogic",
                "SecurityGroups": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo '{\"componentType\": \"MarkLogic\", \"instanceNumber\": 1, \"DataVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdc\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/data\", \"Size\": \"512\"}], \"zone\": \"c\", \"env\": \"rasingh\", \"ConfigVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdb\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/MarkLogic\", \"Size\": \"128\"}], \"region\": \"us-east-1\", \"component\": \"Cluster01\", \"stack-name\": \"rasinghMarkLogicCluster01\"}' > /etc/instance.conf\n",
                                "echo \"INFO generated /etc/instance.conf\"\n",
                                "mkdir -p /opt/custom-marklogic\n",
                                "cat > /opt/custom-marklogic/attach_volumes.py <<EOF\n# /usr/bin/env python\n\n\"\"\"Attach ENI and Volumes to the instance. Mounts volumes.\n\"\"\"\n\nimport boto\nimport json\nimport urllib2\nimport commands\nimport os\nimport time\nfrom boto.exception import EC2ResponseError\n\nRETRY_COUNT = 15\nRETRY_WAIT_MULTIPLIER = 1\n\n\ndef log(message):\n    print \"%s %s\" % (time.strftime(\"[%d/%b/%Y:%H:%M:%S %z]\"), message)\n\n\ndef print_command_output_status(command, status, output):\n    log(\"INFO executed command : %s status : %s output : %s\" % (command, status, output))\n\n\ndef run_command(command):\n    status, output = commands.getstatusoutput(command)\n    print_command_output_status(command, status, output)\n    return (status, output)\n\n\ndef attach_volume(volume, instance_id, device):\n    count = 0\n    alternate_device = get_alternative_name_for_device(device)\n    while (count < RETRY_COUNT and not os.path.exists(device) and not os.path.exists(alternate_device)):\n        log(\"INFO Volume status : %s\" % (volume.status))\n        if volume.status == \"available\":\n            try:\n                volume_attach_result = conn.attach_volume(volume.id, instance_id, device)\n                time.sleep(2)\n                log(\"INFO Volume attach result : \" + str(volume_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for device : %s to appear\" % (device))\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef get_alternative_name_for_device(device):\n    return \"/dev/xvd\" + device[-1:]\n\n\ndef attach_network_interface(network_interface, instance_id, device_index):\n    count = 0\n    while (count < RETRY_COUNT and int(run_command(\"ifconfig | grep 'eth' |wc -l\")[1]) < 2):\n        if network_interface.status == \"available\":\n            try:\n                network_interface_attach_result = conn.attach_network_interface(network_interface.id, instance_id,\n                                                                                device_index)\n                time.sleep(2)\n                log(\"INFO Network Interface attach result : \" + str(network_interface_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for network interface to appear\")\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef mount_volume(device, mount_point):\n    if os.path.exists(device):\n        device = device\n    elif os.path.exists(get_alternative_name_for_device(device)):\n        device = get_alternative_name_for_device(device)\n    else:\n        raise Exception(\"ERROR device : %s does not exist\" % (device))\n\n    if not os.path.isdir(mount_point):\n        run_command(\"sudo mkdir -p \" + mount_point)\n        run_command(\"sudo chown daemon:daemon \" + mount_point)\n    run_command(\"sudo mount \" + device + \" \" + mount_point)\n\n\ndef start_marklogic():\n    run_command(\"sudo service MarkLogic start\")\n\n\ndef stop_marklogic():\n    run_command(\"sudo service MarkLogic stop\")\n\n\ndef validate_volume_length(found_volumes, instance_config):\n    if len(config_volumes) != len(instance_config):\n        message = \"ERROR config mismatch len(config_volumes) : %d len(instance_config['ConfigVolume']) : %d\" % (\n            len(config_volumes), len(instance_config))\n        log(message)\n        raise Exception(message)\n\n\nif __name__ == \"__main__\":\n    conn = boto.connect_ec2()\n    with open(\"/etc/instance.conf\") as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    stop_marklogic()\n\n    instance_id = urllib2.urlopen(\"http://169.254.169.254/latest/meta-data/instance-id\").read()\n    log(\"INFO Found instance id : \" + str(instance_id))\n\n    config_volumes = conn.get_all_volumes(None,\n                                          filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                   \"tag:zone\": instance_config[\"zone\"],\n                                                   \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                   \"tag:type\": \"ConfigVolume\"})\n\n    log(\"INFO Found config volumes : %d \" % (len(config_volumes)))\n    validate_volume_length(config_volumes, instance_config[\"ConfigVolumes\"])\n\n    data_volumes = conn.get_all_volumes(None,\n                                        filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                 \"tag:zone\": instance_config[\"zone\"],\n                                                 \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                 \"tag:type\": \"DataVolume\"})\n    log(\"INFO Found data volume : %d \" % (len(data_volumes)))\n    validate_volume_length(data_volumes, instance_config[\"DataVolumes\"])\n\n    network_interface = conn.get_all_network_interfaces(None, filters={\n        \"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"], \"tag:zone\": instance_config[\"zone\"],\n        \"tag:instance\": str(instance_config[\"instanceNumber\"])})[0]\n\n    log(\"INFO Found network interface : \" + str(network_interface))\n\n    attach_network_interface(network_interface, instance_id, 1)\n\n    for config_volume in config_volumes:\n        attach_volume(config_volume, instance_id, config_volume.tags[\"Device\"])\n        mount_volume(config_volume.tags[\"Device\"], config_volume.tags[\"MountDirectory\"])\n\n    for data_volume in data_volumes:\n        attach_volume(data_volume, instance_id, data_volume.tags[\"Device\"])\n        mount_volume(data_volume.tags[\"Device\"], data_volume.tags[\"MountDirectory\"])\n\n    start_marklogic()\n\nEOF\n",
                                "cat > /opt/custom-marklogic/format_volumes.py <<EOF\n\"\"\"\nDangerous module. Use it to understand how to format volumes.\nThis just exist to capture procedure of formating the EBS.\n\"\"\"\n\nimport commands\nimport boto\nimport json\n\ndef format_volume(device):\n    file_system_status_command = \"sudo file -s \" + device\n    status, output = commands.getstatusoutput(file_system_status_command)\n    if status == 0:\n        path = \"/\"+\"/\".join([device.split(\"/\")[1],output.split()[-1]])\n        status, output = commands.getstatusoutput(\"sudo file -s \"+path)\n        if status == 0 and output == path+\": data\":\n            status, output = commands.getstatusoutput(\"sudo mkfs -t ext4 \"+path)\n            print output\n            return path\n        else:\n            print \"Volume %s is already formatted status : %s output : %s \" % (device, status, output)\n    else:\n        print \"Exiting: non zero status of command '%s' status : %s  output : %s\" % (file_system_status_command, status, output)\n\nif __name__ == '__main__':\n    conn = boto.connect_ec2()\n    with open('/etc/instance.conf') as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    config_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"ConfigVolume\"})[0]\n    print \"Found config volume : \"+str(config_volume)\n\n    data_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"DataVolume\"})[0]\n    print \"Found data volume : \"+str(data_volume)\n\n    format_volume(config_volume.attach_data.device)\n    format_volume(data_volume.attach_data.device)\n\n\nEOF\n",
                                "python /opt/custom-marklogic/attach_volumes.py"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "rasinghMarkLogicCluster01LCc2": {
            "Properties": {
                "EbsOptimized": "false",
                "IamInstanceProfile": "rasingh-MarkLogic-role",
                "ImageId": "ami-5bfcb131",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": "rasingh-MarkLogic",
                "SecurityGroups": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo '{\"componentType\": \"MarkLogic\", \"instanceNumber\": 2, \"DataVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdc\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/data\", \"Size\": \"512\"}], \"zone\": \"c\", \"env\": \"rasingh\", \"ConfigVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdb\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/MarkLogic\", \"Size\": \"128\"}], \"region\": \"us-east-1\", \"component\": \"Cluster01\", \"stack-name\": \"rasinghMarkLogicCluster01\"}' > /etc/instance.conf\n",
                                "echo \"INFO generated /etc/instance.conf\"\n",
                                "mkdir -p /opt/custom-marklogic\n",
                                "cat > /opt/custom-marklogic/attach_volumes.py <<EOF\n# /usr/bin/env python\n\n\"\"\"Attach ENI and Volumes to the instance. Mounts volumes.\n\"\"\"\n\nimport boto\nimport json\nimport urllib2\nimport commands\nimport os\nimport time\nfrom boto.exception import EC2ResponseError\n\nRETRY_COUNT = 15\nRETRY_WAIT_MULTIPLIER = 1\n\n\ndef log(message):\n    print \"%s %s\" % (time.strftime(\"[%d/%b/%Y:%H:%M:%S %z]\"), message)\n\n\ndef print_command_output_status(command, status, output):\n    log(\"INFO executed command : %s status : %s output : %s\" % (command, status, output))\n\n\ndef run_command(command):\n    status, output = commands.getstatusoutput(command)\n    print_command_output_status(command, status, output)\n    return (status, output)\n\n\ndef attach_volume(volume, instance_id, device):\n    count = 0\n    alternate_device = get_alternative_name_for_device(device)\n    while (count < RETRY_COUNT and not os.path.exists(device) and not os.path.exists(alternate_device)):\n        log(\"INFO Volume status : %s\" % (volume.status))\n        if volume.status == \"available\":\n            try:\n                volume_attach_result = conn.attach_volume(volume.id, instance_id, device)\n                time.sleep(2)\n                log(\"INFO Volume attach result : \" + str(volume_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for device : %s to appear\" % (device))\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef get_alternative_name_for_device(device):\n    return \"/dev/xvd\" + device[-1:]\n\n\ndef attach_network_interface(network_interface, instance_id, device_index):\n    count = 0\n    while (count < RETRY_COUNT and int(run_command(\"ifconfig | grep 'eth' |wc -l\")[1]) < 2):\n        if network_interface.status == \"available\":\n            try:\n                network_interface_attach_result = conn.attach_network_interface(network_interface.id, instance_id,\n                                                                                device_index)\n                time.sleep(2)\n                log(\"INFO Network Interface attach result : \" + str(network_interface_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for network interface to appear\")\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef mount_volume(device, mount_point):\n    if os.path.exists(device):\n        device = device\n    elif os.path.exists(get_alternative_name_for_device(device)):\n        device = get_alternative_name_for_device(device)\n    else:\n        raise Exception(\"ERROR device : %s does not exist\" % (device))\n\n    if not os.path.isdir(mount_point):\n        run_command(\"sudo mkdir -p \" + mount_point)\n        run_command(\"sudo chown daemon:daemon \" + mount_point)\n    run_command(\"sudo mount \" + device + \" \" + mount_point)\n\n\ndef start_marklogic():\n    run_command(\"sudo service MarkLogic start\")\n\n\ndef stop_marklogic():\n    run_command(\"sudo service MarkLogic stop\")\n\n\ndef validate_volume_length(found_volumes, instance_config):\n    if len(config_volumes) != len(instance_config):\n        message = \"ERROR config mismatch len(config_volumes) : %d len(instance_config['ConfigVolume']) : %d\" % (\n            len(config_volumes), len(instance_config))\n        log(message)\n        raise Exception(message)\n\n\nif __name__ == \"__main__\":\n    conn = boto.connect_ec2()\n    with open(\"/etc/instance.conf\") as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    stop_marklogic()\n\n    instance_id = urllib2.urlopen(\"http://169.254.169.254/latest/meta-data/instance-id\").read()\n    log(\"INFO Found instance id : \" + str(instance_id))\n\n    config_volumes = conn.get_all_volumes(None,\n                                          filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                   \"tag:zone\": instance_config[\"zone\"],\n                                                   \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                   \"tag:type\": \"ConfigVolume\"})\n\n    log(\"INFO Found config volumes : %d \" % (len(config_volumes)))\n    validate_volume_length(config_volumes, instance_config[\"ConfigVolumes\"])\n\n    data_volumes = conn.get_all_volumes(None,\n                                        filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                 \"tag:zone\": instance_config[\"zone\"],\n                                                 \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                 \"tag:type\": \"DataVolume\"})\n    log(\"INFO Found data volume : %d \" % (len(data_volumes)))\n    validate_volume_length(data_volumes, instance_config[\"DataVolumes\"])\n\n    network_interface = conn.get_all_network_interfaces(None, filters={\n        \"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"], \"tag:zone\": instance_config[\"zone\"],\n        \"tag:instance\": str(instance_config[\"instanceNumber\"])})[0]\n\n    log(\"INFO Found network interface : \" + str(network_interface))\n\n    attach_network_interface(network_interface, instance_id, 1)\n\n    for config_volume in config_volumes:\n        attach_volume(config_volume, instance_id, config_volume.tags[\"Device\"])\n        mount_volume(config_volume.tags[\"Device\"], config_volume.tags[\"MountDirectory\"])\n\n    for data_volume in data_volumes:\n        attach_volume(data_volume, instance_id, data_volume.tags[\"Device\"])\n        mount_volume(data_volume.tags[\"Device\"], data_volume.tags[\"MountDirectory\"])\n\n    start_marklogic()\n\nEOF\n",
                                "cat > /opt/custom-marklogic/format_volumes.py <<EOF\n\"\"\"\nDangerous module. Use it to understand how to format volumes.\nThis just exist to capture procedure of formating the EBS.\n\"\"\"\n\nimport commands\nimport boto\nimport json\n\ndef format_volume(device):\n    file_system_status_command = \"sudo file -s \" + device\n    status, output = commands.getstatusoutput(file_system_status_command)\n    if status == 0:\n        path = \"/\"+\"/\".join([device.split(\"/\")[1],output.split()[-1]])\n        status, output = commands.getstatusoutput(\"sudo file -s \"+path)\n        if status == 0 and output == path+\": data\":\n            status, output = commands.getstatusoutput(\"sudo mkfs -t ext4 \"+path)\n            print output\n            return path\n        else:\n            print \"Volume %s is already formatted status : %s output : %s \" % (device, status, output)\n    else:\n        print \"Exiting: non zero status of command '%s' status : %s  output : %s\" % (file_system_status_command, status, output)\n\nif __name__ == '__main__':\n    conn = boto.connect_ec2()\n    with open('/etc/instance.conf') as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    config_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"ConfigVolume\"})[0]\n    print \"Found config volume : \"+str(config_volume)\n\n    data_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"DataVolume\"})[0]\n    print \"Found data volume : \"+str(data_volume)\n\n    format_volume(config_volume.attach_data.device)\n    format_volume(data_volume.attach_data.device)\n\n\nEOF\n",
                                "python /opt/custom-marklogic/attach_volumes.py"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "rasinghMarkLogicCluster01LCe1": {
            "Properties": {
                "EbsOptimized": "false",
                "IamInstanceProfile": "rasingh-MarkLogic-role",
                "ImageId": "ami-5bfcb131",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": "rasingh-MarkLogic",
                "SecurityGroups": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo '{\"componentType\": \"MarkLogic\", \"instanceNumber\": 1, \"DataVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdc\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/data\", \"Size\": \"512\"}], \"zone\": \"e\", \"env\": \"rasingh\", \"ConfigVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdb\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/MarkLogic\", \"Size\": \"128\"}], \"region\": \"us-east-1\", \"component\": \"Cluster01\", \"stack-name\": \"rasinghMarkLogicCluster01\"}' > /etc/instance.conf\n",
                                "echo \"INFO generated /etc/instance.conf\"\n",
                                "mkdir -p /opt/custom-marklogic\n",
                                "cat > /opt/custom-marklogic/attach_volumes.py <<EOF\n# /usr/bin/env python\n\n\"\"\"Attach ENI and Volumes to the instance. Mounts volumes.\n\"\"\"\n\nimport boto\nimport json\nimport urllib2\nimport commands\nimport os\nimport time\nfrom boto.exception import EC2ResponseError\n\nRETRY_COUNT = 15\nRETRY_WAIT_MULTIPLIER = 1\n\n\ndef log(message):\n    print \"%s %s\" % (time.strftime(\"[%d/%b/%Y:%H:%M:%S %z]\"), message)\n\n\ndef print_command_output_status(command, status, output):\n    log(\"INFO executed command : %s status : %s output : %s\" % (command, status, output))\n\n\ndef run_command(command):\n    status, output = commands.getstatusoutput(command)\n    print_command_output_status(command, status, output)\n    return (status, output)\n\n\ndef attach_volume(volume, instance_id, device):\n    count = 0\n    alternate_device = get_alternative_name_for_device(device)\n    while (count < RETRY_COUNT and not os.path.exists(device) and not os.path.exists(alternate_device)):\n        log(\"INFO Volume status : %s\" % (volume.status))\n        if volume.status == \"available\":\n            try:\n                volume_attach_result = conn.attach_volume(volume.id, instance_id, device)\n                time.sleep(2)\n                log(\"INFO Volume attach result : \" + str(volume_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for device : %s to appear\" % (device))\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef get_alternative_name_for_device(device):\n    return \"/dev/xvd\" + device[-1:]\n\n\ndef attach_network_interface(network_interface, instance_id, device_index):\n    count = 0\n    while (count < RETRY_COUNT and int(run_command(\"ifconfig | grep 'eth' |wc -l\")[1]) < 2):\n        if network_interface.status == \"available\":\n            try:\n                network_interface_attach_result = conn.attach_network_interface(network_interface.id, instance_id,\n                                                                                device_index)\n                time.sleep(2)\n                log(\"INFO Network Interface attach result : \" + str(network_interface_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for network interface to appear\")\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef mount_volume(device, mount_point):\n    if os.path.exists(device):\n        device = device\n    elif os.path.exists(get_alternative_name_for_device(device)):\n        device = get_alternative_name_for_device(device)\n    else:\n        raise Exception(\"ERROR device : %s does not exist\" % (device))\n\n    if not os.path.isdir(mount_point):\n        run_command(\"sudo mkdir -p \" + mount_point)\n        run_command(\"sudo chown daemon:daemon \" + mount_point)\n    run_command(\"sudo mount \" + device + \" \" + mount_point)\n\n\ndef start_marklogic():\n    run_command(\"sudo service MarkLogic start\")\n\n\ndef stop_marklogic():\n    run_command(\"sudo service MarkLogic stop\")\n\n\ndef validate_volume_length(found_volumes, instance_config):\n    if len(config_volumes) != len(instance_config):\n        message = \"ERROR config mismatch len(config_volumes) : %d len(instance_config['ConfigVolume']) : %d\" % (\n            len(config_volumes), len(instance_config))\n        log(message)\n        raise Exception(message)\n\n\nif __name__ == \"__main__\":\n    conn = boto.connect_ec2()\n    with open(\"/etc/instance.conf\") as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    stop_marklogic()\n\n    instance_id = urllib2.urlopen(\"http://169.254.169.254/latest/meta-data/instance-id\").read()\n    log(\"INFO Found instance id : \" + str(instance_id))\n\n    config_volumes = conn.get_all_volumes(None,\n                                          filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                   \"tag:zone\": instance_config[\"zone\"],\n                                                   \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                   \"tag:type\": \"ConfigVolume\"})\n\n    log(\"INFO Found config volumes : %d \" % (len(config_volumes)))\n    validate_volume_length(config_volumes, instance_config[\"ConfigVolumes\"])\n\n    data_volumes = conn.get_all_volumes(None,\n                                        filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                 \"tag:zone\": instance_config[\"zone\"],\n                                                 \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                 \"tag:type\": \"DataVolume\"})\n    log(\"INFO Found data volume : %d \" % (len(data_volumes)))\n    validate_volume_length(data_volumes, instance_config[\"DataVolumes\"])\n\n    network_interface = conn.get_all_network_interfaces(None, filters={\n        \"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"], \"tag:zone\": instance_config[\"zone\"],\n        \"tag:instance\": str(instance_config[\"instanceNumber\"])})[0]\n\n    log(\"INFO Found network interface : \" + str(network_interface))\n\n    attach_network_interface(network_interface, instance_id, 1)\n\n    for config_volume in config_volumes:\n        attach_volume(config_volume, instance_id, config_volume.tags[\"Device\"])\n        mount_volume(config_volume.tags[\"Device\"], config_volume.tags[\"MountDirectory\"])\n\n    for data_volume in data_volumes:\n        attach_volume(data_volume, instance_id, data_volume.tags[\"Device\"])\n        mount_volume(data_volume.tags[\"Device\"], data_volume.tags[\"MountDirectory\"])\n\n    start_marklogic()\n\nEOF\n",
                                "cat > /opt/custom-marklogic/format_volumes.py <<EOF\n\"\"\"\nDangerous module. Use it to understand how to format volumes.\nThis just exist to capture procedure of formating the EBS.\n\"\"\"\n\nimport commands\nimport boto\nimport json\n\ndef format_volume(device):\n    file_system_status_command = \"sudo file -s \" + device\n    status, output = commands.getstatusoutput(file_system_status_command)\n    if status == 0:\n        path = \"/\"+\"/\".join([device.split(\"/\")[1],output.split()[-1]])\n        status, output = commands.getstatusoutput(\"sudo file -s \"+path)\n        if status == 0 and output == path+\": data\":\n            status, output = commands.getstatusoutput(\"sudo mkfs -t ext4 \"+path)\n            print output\n            return path\n        else:\n            print \"Volume %s is already formatted status : %s output : %s \" % (device, status, output)\n    else:\n        print \"Exiting: non zero status of command '%s' status : %s  output : %s\" % (file_system_status_command, status, output)\n\nif __name__ == '__main__':\n    conn = boto.connect_ec2()\n    with open('/etc/instance.conf') as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    config_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"ConfigVolume\"})[0]\n    print \"Found config volume : \"+str(config_volume)\n\n    data_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"DataVolume\"})[0]\n    print \"Found data volume : \"+str(data_volume)\n\n    format_volume(config_volume.attach_data.device)\n    format_volume(data_volume.attach_data.device)\n\n\nEOF\n",
                                "python /opt/custom-marklogic/attach_volumes.py"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "rasinghMarkLogicCluster01LCe2": {
            "Properties": {
                "EbsOptimized": "false",
                "IamInstanceProfile": "rasingh-MarkLogic-role",
                "ImageId": "ami-5bfcb131",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": "rasingh-MarkLogic",
                "SecurityGroups": [
                    {
                        "Ref": "rasinghMarkLogicCluster01InternalSG"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo '{\"componentType\": \"MarkLogic\", \"instanceNumber\": 2, \"DataVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdc\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/data\", \"Size\": \"512\"}], \"zone\": \"e\", \"env\": \"rasingh\", \"ConfigVolumes\": [{\"Encrypted\": \"false\", \"DeletionPolicy\": \"Delete\", \"VolumeType\": \"gp2\", \"FromSnapshot\": \"true\", \"Iops\": \"10\", \"Device\": \"/dev/sdb\", \"SnapshotId\": \"snap-41163b47\", \"MountDirectory\": \"/var/opt/MarkLogic\", \"Size\": \"128\"}], \"region\": \"us-east-1\", \"component\": \"Cluster01\", \"stack-name\": \"rasinghMarkLogicCluster01\"}' > /etc/instance.conf\n",
                                "echo \"INFO generated /etc/instance.conf\"\n",
                                "mkdir -p /opt/custom-marklogic\n",
                                "cat > /opt/custom-marklogic/attach_volumes.py <<EOF\n# /usr/bin/env python\n\n\"\"\"Attach ENI and Volumes to the instance. Mounts volumes.\n\"\"\"\n\nimport boto\nimport json\nimport urllib2\nimport commands\nimport os\nimport time\nfrom boto.exception import EC2ResponseError\n\nRETRY_COUNT = 15\nRETRY_WAIT_MULTIPLIER = 1\n\n\ndef log(message):\n    print \"%s %s\" % (time.strftime(\"[%d/%b/%Y:%H:%M:%S %z]\"), message)\n\n\ndef print_command_output_status(command, status, output):\n    log(\"INFO executed command : %s status : %s output : %s\" % (command, status, output))\n\n\ndef run_command(command):\n    status, output = commands.getstatusoutput(command)\n    print_command_output_status(command, status, output)\n    return (status, output)\n\n\ndef attach_volume(volume, instance_id, device):\n    count = 0\n    alternate_device = get_alternative_name_for_device(device)\n    while (count < RETRY_COUNT and not os.path.exists(device) and not os.path.exists(alternate_device)):\n        log(\"INFO Volume status : %s\" % (volume.status))\n        if volume.status == \"available\":\n            try:\n                volume_attach_result = conn.attach_volume(volume.id, instance_id, device)\n                time.sleep(2)\n                log(\"INFO Volume attach result : \" + str(volume_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for device : %s to appear\" % (device))\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef get_alternative_name_for_device(device):\n    return \"/dev/xvd\" + device[-1:]\n\n\ndef attach_network_interface(network_interface, instance_id, device_index):\n    count = 0\n    while (count < RETRY_COUNT and int(run_command(\"ifconfig | grep 'eth' |wc -l\")[1]) < 2):\n        if network_interface.status == \"available\":\n            try:\n                network_interface_attach_result = conn.attach_network_interface(network_interface.id, instance_id,\n                                                                                device_index)\n                time.sleep(2)\n                log(\"INFO Network Interface attach result : \" + str(network_interface_attach_result))\n            except EC2ResponseError as e:\n                log(\"INFO %s\" % e)\n        seconds = count * RETRY_WAIT_MULTIPLIER + 1\n        log(\"INFO waiting for network interface to appear\")\n        log(\"INFO sleeping for %s seconds\" % (seconds))\n        time.sleep(seconds)\n        count += 1\n\n\ndef mount_volume(device, mount_point):\n    if os.path.exists(device):\n        device = device\n    elif os.path.exists(get_alternative_name_for_device(device)):\n        device = get_alternative_name_for_device(device)\n    else:\n        raise Exception(\"ERROR device : %s does not exist\" % (device))\n\n    if not os.path.isdir(mount_point):\n        run_command(\"sudo mkdir -p \" + mount_point)\n        run_command(\"sudo chown daemon:daemon \" + mount_point)\n    run_command(\"sudo mount \" + device + \" \" + mount_point)\n\n\ndef start_marklogic():\n    run_command(\"sudo service MarkLogic start\")\n\n\ndef stop_marklogic():\n    run_command(\"sudo service MarkLogic stop\")\n\n\ndef validate_volume_length(found_volumes, instance_config):\n    if len(config_volumes) != len(instance_config):\n        message = \"ERROR config mismatch len(config_volumes) : %d len(instance_config['ConfigVolume']) : %d\" % (\n            len(config_volumes), len(instance_config))\n        log(message)\n        raise Exception(message)\n\n\nif __name__ == \"__main__\":\n    conn = boto.connect_ec2()\n    with open(\"/etc/instance.conf\") as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    stop_marklogic()\n\n    instance_id = urllib2.urlopen(\"http://169.254.169.254/latest/meta-data/instance-id\").read()\n    log(\"INFO Found instance id : \" + str(instance_id))\n\n    config_volumes = conn.get_all_volumes(None,\n                                          filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                   \"tag:zone\": instance_config[\"zone\"],\n                                                   \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                   \"tag:type\": \"ConfigVolume\"})\n\n    log(\"INFO Found config volumes : %d \" % (len(config_volumes)))\n    validate_volume_length(config_volumes, instance_config[\"ConfigVolumes\"])\n\n    data_volumes = conn.get_all_volumes(None,\n                                        filters={\"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"],\n                                                 \"tag:zone\": instance_config[\"zone\"],\n                                                 \"tag:instance\": str(instance_config[\"instanceNumber\"]),\n                                                 \"tag:type\": \"DataVolume\"})\n    log(\"INFO Found data volume : %d \" % (len(data_volumes)))\n    validate_volume_length(data_volumes, instance_config[\"DataVolumes\"])\n\n    network_interface = conn.get_all_network_interfaces(None, filters={\n        \"tag:aws:cloudformation:stack-name\": instance_config[\"stack-name\"], \"tag:zone\": instance_config[\"zone\"],\n        \"tag:instance\": str(instance_config[\"instanceNumber\"])})[0]\n\n    log(\"INFO Found network interface : \" + str(network_interface))\n\n    attach_network_interface(network_interface, instance_id, 1)\n\n    for config_volume in config_volumes:\n        attach_volume(config_volume, instance_id, config_volume.tags[\"Device\"])\n        mount_volume(config_volume.tags[\"Device\"], config_volume.tags[\"MountDirectory\"])\n\n    for data_volume in data_volumes:\n        attach_volume(data_volume, instance_id, data_volume.tags[\"Device\"])\n        mount_volume(data_volume.tags[\"Device\"], data_volume.tags[\"MountDirectory\"])\n\n    start_marklogic()\n\nEOF\n",
                                "cat > /opt/custom-marklogic/format_volumes.py <<EOF\n\"\"\"\nDangerous module. Use it to understand how to format volumes.\nThis just exist to capture procedure of formating the EBS.\n\"\"\"\n\nimport commands\nimport boto\nimport json\n\ndef format_volume(device):\n    file_system_status_command = \"sudo file -s \" + device\n    status, output = commands.getstatusoutput(file_system_status_command)\n    if status == 0:\n        path = \"/\"+\"/\".join([device.split(\"/\")[1],output.split()[-1]])\n        status, output = commands.getstatusoutput(\"sudo file -s \"+path)\n        if status == 0 and output == path+\": data\":\n            status, output = commands.getstatusoutput(\"sudo mkfs -t ext4 \"+path)\n            print output\n            return path\n        else:\n            print \"Volume %s is already formatted status : %s output : %s \" % (device, status, output)\n    else:\n        print \"Exiting: non zero status of command '%s' status : %s  output : %s\" % (file_system_status_command, status, output)\n\nif __name__ == '__main__':\n    conn = boto.connect_ec2()\n    with open('/etc/instance.conf') as aws_config_file:\n        instance_config = json.load(aws_config_file)\n\n    config_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"ConfigVolume\"})[0]\n    print \"Found config volume : \"+str(config_volume)\n\n    data_volume = conn.get_all_volumes(None, filters={'tag:aws:cloudformation:stack-name': 'rasingh-MarkLogic-ml-master', 'tag:zone': instance_config[\"zone\"], 'tag:instance': str(instance_config[\"instanceNumber\"]), 'tag:type': \"DataVolume\"})[0]\n    print \"Found data volume : \"+str(data_volume)\n\n    format_volume(config_volume.attach_data.device)\n    format_volume(data_volume.attach_data.device)\n\n\nEOF\n",
                                "python /opt/custom-marklogic/attach_volumes.py"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        }
    }
}